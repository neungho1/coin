def to_coordinates_and_features(img):
    """Converts an image to a set of coordinates and features.

    Args:
        img (torch.Tensor): Shape (channels, height, width).
    """
    # Coordinates are indices of all non zero locations of a tensor of ones of
    # same shape as spatial dimensions of image
    coordinates = torch.ones(img.shape[1:]).nonzero(as_tuple=False).float()
    # Normalize coordinates to lie in [-.5, .5]
    coordinates = coordinates / (img.shape[1] - 1) - 0.5
    # Convert to range [-1, 1]
    coordinates *= 2
    # Convert image to a tensor of features of shape (num_points, channels)
    features = img.reshape(img.shape[0], -1).T
    return coordinates, features

print(coordinates.size(), features.size())
torch.Size([2560000, 2]) torch.Size([2560000, 3])



                #print(predicted.size())
                #predictes.append(predicted.cpu().detach().numpy())
                #labels.append(coordinates.detach().cpu().numpy())

                # features를 평균과 로그-분산으로 변경
                #target_mean = features[:, :self.representation.output_dim]
                #target_var = features[:, 3:]
                #print(target_mean.size(),coordinates.size(),target_var.size())
                # 분산은 표준편차의 제곱이므로, 로그 분산에서 지수를 취하고 제곱합니다.
                #print(target_var)
                #target_var = target_var.squeeze()
                #print(target_mean.size(),coordinates.size(),target_var.size())
                #loss = self.loss_func(target_mean ,coordinates, target_var)


CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir -iid 1 --num_layers 13 --layer_size 49
n_itler =10000
train data_len = 5
img : 3,3 


CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir -iid 1 --num_layers 13 --layer_size 49
n_itler =10000
train data_len = 100
img : test_1,1

    for j in range(100):
        if j < 100:
            num = j+100
            img = imageio.imread(f"/workspace/eunho/BTech_Dataset_transformed/01/train/ok/{num:04d}.bmp")
            img = transforms.ToTensor()(img).float().to(device, dtype)
            img_list.append(img)


-threshold = 0.5-
1
mask = (img_recon_mean - 4 * img_recon_std > img) | (img_recon_mean + 4 * img_recon_std < img)
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 40
n_itler =100
Segmentation AUROC: 0.5294538710321872

2
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 28
n_itler =500
Segmentation AUROC: 0.5547740694151255

3
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 28
n_itler =1000
Segmentation AUROC: 0.5111764228042921

-threshold = 0-

4
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 28
n_itler =1000
Segmentation AUROC: 0.5184740413780143

5
mask = (img_recon_mean - 3 * img_recon_std > img) | (img_recon_mean + 3 * img_recon_std < img)
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 40
n_itler =100
Segmentation AUROC: 0.5369367709085546

6
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =100
Segmentation AUROC: 0.5022283184024208

7
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =200
Segmentation AUROC: 0.5472776630220859


8
-threshold = 0.5-
mask = (img_recon_mean - 3 * img_recon_std > img) | (img_recon_mean + 3 * img_recon_std < img)
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 28
n_itler =200
Segmentation AUROC: 0.5370912595870962

9
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 10 --layer_size 28
n_itler =500
Segmentation AUROC: 0.5065705208747903

10
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =250
Segmentation AUROC: 0.5216201893686836

11
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =300
Segmentation AUROC: 0.5418438140990862

12
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =350
Segmentation AUROC: 0.5386317830803209

13
CUDA_VISIBLE_DEVICES=2 python main.py -ld logs_dir --num_layers 13 --layer_size 49
n_itler =400
Segmentation AUROC: 0.5
teray2
Segmentation AUROC: 0.5434461228918196